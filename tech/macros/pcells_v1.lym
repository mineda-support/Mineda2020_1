<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Mineda2020_1</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text># coding: cp932
# Mineda2020_1 PCells v0.66 Sep. 24, 2020 copy left by S. Moriyama (Anagix Corporation)
module Mineda2020_1

  include RBA

  #  Mineda2020_1.constants.member?(:Nch) &amp;&amp; remove_const(:Nch)
  Mineda2020_1.constants.member?(:Pch) &amp;&amp; remove_const(:Pch)
  Mineda2020_1.constants.member?(:R_diff) &amp;&amp; remove_const(:R_diff)
  #  Mineda2020_1.constants.member?(:HR_poly) &amp;&amp; remove_const(:HR_poly)
  Mineda2020_1.constants.member?(:MIM_cap) &amp;&amp; remove_const(:MIM_cap)
  Mineda2020_1.constants.member?(:Diff_cap) &amp;&amp; remove_const(:Diff_cap)  
  Mineda2020_1.constants.member?(:PCells) &amp;&amp; remove_const(:PCells)
  
  class MinedaPCell &lt;PCellDeclarationHelper
    include RBA
    def insert_cell indices, index, x, y, vs, u1, fill_metal=true
      #      via = instantiate via_index, x, y
      #      inst = cell.insert(via)
      case index
      when :diff
        create_box indices[:diff], x-vs/2, y-vs/2, x+vs/2, y+vs/2
        return
      when :via
        if fill_metal
          create_box indices[:m1], x-vs/2, y-vs/2, x+vs/2, y+vs/2
          create_box indices[:m2], x-vs/2, y-vs/2, x+vs/2, y+vs/2
        end
      when :cnt
        if fill_metal
          create_box indices[:m1], x-vs/2, y-vs/2, x+vs/2, y+vs/2
        end
      end
      vu2 = vs/2 - u1/2
      create_box indices[index], x-vu2, y-vu2, x+vu2, y+vu2
    end
    
    def create_box index, x1, y1, x2, y2
      cell.shapes(index).insert(Box::new(x1, y1, x2, y2))
    end
    
    def create_path index, x1, y1, x2, y2, w, be, ee
      points = [Point::new(x1, y1), Point::new(x2, y2)]
      cell.shapes(index).insert(Path::new(points, w, be, ee))
    end
    
    def create_path2 indices, index, x1, y1, x2, y2, x3, y3, w, be, ee
      points = [Point::new(x1, y1), Point::new(x2, y2), Point::new(x3, y3)]
      cell.shapes(indices[index]).insert(Path::new(points, w, be, ee))
    end
  end
  
  # The PCell declaration for Mineda2020_1 MOSFET
  
  class MOS &lt;MinedaPCell
    
    include RBA

    def initialize

      # Important: initialize the super class
      super
    end
    
    def display_text_impl
      # Provide a descriptive text for the cell
      "L=#{l.to_s}um,W=#{w.to_s}um"
    end
    
    def coerce_parameters_impl
      
      # We employ coerce_parameters_impl to decide whether the handle or the 
      # numeric parameter has changed (by comparing against the effective 
      # radius ru) and set ru to the effective radius. We also update the 
      # numerical value or the shape, depending on which on has not changed.
    end
    
    # default implementation
    def can_create_from_shape_impl
      false
    end
    
    def parameters_from_shape_impl
    end
    
    def transformation_from_shape_impl
      # I「Create PCell from shape（形状からPCellを作成）」プロトコルを実装します。
      # 変形を決定するために、図形のバウンディングボックスの中心を使用します。
      Trans.new(shape.bbox.center)
    end
    
    def coerce_parameters_impl
      set_wtot(w*n)
    end
    
    def produce_impl_core
      gw = (w/layout.dbu).to_i
      gl = ((l+4.0.um)/layout.dbu).to_i
      s = 12.0.um # via size (fixed)
      vs = (s/layout.dbu).to_i

      grid = 4.0.um
      u1 = (grid/layout.dbu).to_i
      metal1width = 10.0.um
      m1w = (metal1width/layout.dbu).to_i
      metal2width = 10.0.um
      m2w = (metal2width/layout.dbu).to_i   
      
      #      nwl_index = layout.insert_layer(LayerInfo::new(1, 0))
      diff_index = layout.insert_layer(LayerInfo::new(3, 0))
      pol_index = layout.insert_layer(LayerInfo::new(5, 0))
      m1_index = layout.insert_layer(LayerInfo::new(8, 0))
      m2_index = layout.insert_layer(LayerInfo::new(10, 0))
      parea_index = layout.insert_layer(LayerInfo::new(18, 0))
      via_index = layout.insert_layer(LayerInfo::new(9, 0))
      cnt_index = layout.insert_layer(LayerInfo::new(7,0))
      indices = {diff: diff_index, parea: parea_index, 
                 m1: m1_index, m2: m2_index, via: via_index,
                 cnt: cnt_index}
      offset = 0
      prev = nil
      (n+1).times{|i|
        x = vs/2 + offset
        create_path(m1_index, x, vs+u1, x, vs+u1+gw, vs, 0, 0) # s/d m1
        create_path(cnt_index, x, vs+u1, x, vs+u1+gw, vs-u1, -u1/2, -u1/2) 
        #        create_dcont(dcont_index, x, vs+u1, x, vs+u1+gw, vs)  
        x = x + vs/2 + gl/2 + u1
        if i &lt; n # gate
          y = vs/2 + u1/4
          y = vs/2 if l &lt;= 10.0.um
          if i == 0
            create_path(m1_index, x, vs/2, x, vs+u1+gw, gl, vs/2, u1/2)
          else
            insert_cell indices, :via, x, y, vs, u1 if i%2 != 0 || i != n-1
            create_path(m1_index, x, vs+u1, x, vs+u1+gw, gl, vs/2, u1/2) 
          end
          if prev
            if i % 2 == 0
              create_path indices[:m1], prev-u1, y, x+gl/2, y, m1w, 0, 0
            else
              create_path indices[:m2], prev-u1, y, x, y, m1w, 0, 0
            end
          end
          prev = x
        end
        offset = offset + vs + gl +2*u1  
      }    
      create_box diff_index, 0, vs+u1, offset -gl-vs+u1, vs+u1+gw # s/d diffusion
      
      x = y = vs/2
      # insert_cell via_index, x, y, cell
      yield indices, 0, 0, vs*2+gl, (vs+u1)*2+gw+u1/4, vs, u1, gl, m1w, m2w, l
    end
  end
  
  class Pch &lt; MOS
    include RBA
    def initialize
      super
      param(:w, TypeDouble, "Pch w", :default =&gt; 20.0.um)
      param(:l, TypeDouble, "Pch l", :default =&gt; 10.0.um)
      param(:n, TypeInt, "Number of fingers", :default =&gt; 1)
      param(:wtot, TypeDouble, "Total width", :default =&gt; 0, :hidden=&gt; true)
    end 
    
    def display_text_impl
      "Pch\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s}, Total W=#{wtot})"
    end  
    
    def produce_impl # PMOS
      produce_impl_core {|indices, x1, y1, x2, y2, vs, u1, gl, m1w, m2w, l|
        y = y1+vs/2
        if n == 1
          x = x1+vs/2+u1*2
        else
          x = x1+vs/2+gl+u1
          y = y + u1/4 if l &gt; 10.0.um
        end
        insert_cell indices, :via, x, y, vs, u1
        offset = 0
        top = nil
        bottom = nil
        #       prev_m1 = nil
        (n+1).times{|i|
          x = offset  + vs/2
          prev_m1 = x  if i &gt;=1   
          if i % 2 == 0
            # first s/d and via
            insert_cell indices, :via, x, y2-vs/2, vs, u1 if i == 0
            create_path indices[:m1], x, y2-vs-u1, x, y2-vs/2, m1w, m1w/2, m1w/2
            if top
              create_path indices[:m1], top, y2-vs/2, x, y2-vs/2, m1w, m1w/2, m1w/2
            end
            top = x
          else
            # second s/d and via
            if n == 1
              y = y1+vs/2
            else
              y = y1+vs/2-m2w-u1*2 - u1/2-u1/4
              y = y - u1/2-u1/4 if l &lt;= 10.0.um
            end
            insert_cell indices, :via, x, y, vs, u1 if i &gt;= n-1
            create_path indices[:m1], x, y+u1, x, y1+u1+m2w, m1w, m1w/2, m1w/2
            if bottom
              create_path indices[:m1], bottom, y, x, y, m1w, m1w/2, m1w/2
            end
            bottom = x
          end
          offset = offset + vs + gl + 2*u1
        }
        # nsubcont and via
        if n % 2 == 0
          y = y1 + vs/2 - vs - 2*u1-u1/4
          y = y - u1/2-u1/4 if l &lt;= 10.0.um
        else
          y = y2 - vs/2
        end
        x = offset - vs -gl - u1/2
        insert_cell indices, :cnt, x, y, vs, u1
        insert_cell indices, :via, x, y, vs, u1
        # insert_cell indices, :diff, x, y, vs, u1
        
        create_box indices[:parea], x1-u1/2, y1+vs+u1/2, offset-gl -vs +u1+u1/2, y2-vs-u1/2
      }
    end
  end    # PCellを配置するライブラリ 
  
  class Resistor &lt; MinedaPCell
    def initialize

      # Important: initialize the super class
      super
    end
    
    # default implementation
    def can_create_from_shape_impl
      false
    end
    
    def parameters_from_shape_impl
    end
    
    def transformation_from_shape_impl
      # I「Create PCell from shape（形状からPCellを作成）」プロトコルを実装します。
      # 変形を決定するために、図形のバウンディングボックスの中心を使用します。
      Trans.new(shape.bbox.center)
    end

    def produce_impl
      # pol_index = layout.insert_layer(LayerInfo::new(5, 0))
      diff_index = layout.insert_layer(LayerInfo::new(3, 0))
      cnt_index = layout.insert_layer(LayerInfo::new(7,0))
      m1_index = layout.insert_layer(LayerInfo::new(8, 0))
      m2_index = layout.insert_layer(LayerInfo::new(10, 0))
      res_index = layout.insert_layer(LayerInfo::new(15, 0))
      via_index = layout.insert_layer(LayerInfo::new(9, 0))
      indices = {diff: diff_index, m1: m1_index, m2: m2_index, 
                 via: via_index, cnt: cnt_index, res: res_index}
      if ho
        produce_impl_core(1, indices)
      else
        produce_impl_core(0, indices)
      end
    end 
    
    def create_contacts indices, w, x0, y, vs, u1
      n = (w/vs).to_i
      if n &lt;= 1
        insert_cell indices, :via, x0, y, vs, u1
        insert_cell indices, :cnt, x0, y, vs, u1
        insert_cell indices, :diff, x0, y, vs, u1
      else
        pitch = vs + (w - vs*n)/(n-1)
        (x0-w/2+vs/2).step(x0+w/2, pitch){|x|
          insert_cell indices, :via, x, y, vs, u1, false
          insert_cell indices, :cnt, x, y, vs, u1, false
          insert_cell indices, :diff, x, y, vs, u1, false
        }
        create_box indices[:m1], x0-w/2, y-vs/2, x0+w/2, y+vs/2
        create_box indices[:m2], x0-w/2, y-vs/2, x0+w/2, y+vs/2
      end
    end
    
    def produce_impl_core(header_outside, indices)
      rw = (w/layout.dbu).to_i
      rrl = (l/layout.dbu).to_i
      via_size = 12.0.um # via size (fixed)
      vs = (via_size/layout.dbu).to_i
      sp = (s/layout.dbu).to_i
      ms = (m/layout.dbu).to_i
      grid = 4.0.um
      u1 = (grid/layout.dbu).to_i
      metal1width = 10.0.um
      m1w = (metal1width/layout.dbu).to_i
      rw_ho = rw*header_outside
      rl = rrl - (sp+rw)*(n-1) -rw_ho
      sl = [(rl/n/u1).to_i*u1, ms-2*rw].min
      if sl*n + (sp+rw)*(n-1) == rrl
        r = 0
      else
        sl = [sl + u1, ms-2*rw].min
        r = rrl - sl*(n-1) - (sp+rw)*(n-1)
        if r &lt;= 0 &amp;&amp; sl &gt; ms-2*rw
          rl = rrl - sp*(n-2)
          set_n n - 1
        end
      end
      puts "rrl = #{rrl}, rl = #{rl}, n = #{n}, sp=#{sp}, sl = #{sl}, r = #{r}"
      prev_x = nil
      for i in 0..n-1
        offset = vs/2 + (sp+rw)*i
        r = sl
        if i == n - 1 # rl - sl*(i+1) &lt; 0
          r = rl - sl*i
        end
        puts "offset=#{offset}, r=#{r} for i=#{i}"
        if i % 2 == 0
          x = offset
          points = [Point::new(x, vs-rw_ho), Point::new(x, vs+r)]
          cell.shapes(indices[:res]).insert(Path::new(points, rw, 0, 0))    
          if i == 0 
            points = [Point::new(x, -rw_ho), Point::new(x, vs+r)]
            y = vs/2-rw_ho
            #insert_cell indices, :via, x, y, vs, u1
            #insert_cell indices, :cnt, x, y, vs, u1
            #insert_cell indices, :diff, x, y, vs, u1
            create_contacts indices, rw, x, y, vs, u1
          end
          if i == n-1
            #points = [Point::new(x, vs), Point::new(x, vs+r+vs)]
            if i != 0
              points = [Point::new(x, vs-rw), Point::new(x, vs+r+vs)]
            else
              points = [Point::new(x, -rw_ho), Point::new(x, vs+r+vs)]
            end
            y =  vs+r+vs/2
            #insert_cell indices, :via, x, y, vs, u1
            #insert_cell indices, :cnt, x, y, vs, u1
            #insert_cell indices, :diff, x, y, vs, u1
            create_contacts indices, rw, x, y, vs, u1
          end
          cell.shapes(indices[:diff]).insert(Path::new(points, rw, 0, 0))
          
          if prev_x
            y = vs - rw/2
            points = [Point::new(x, y), Point::new(prev_x, y)]
            cell.shapes(indices[:diff]).insert(Path::new(points, rw, rw/2, rw/2))
            cell.shapes(indices[:res]).insert(Path::new(points, rw, rw/2, rw/2))
          end  
        else
          points = [Point::new(offset, vs+(sl-r)), Point::new(offset, vs+sl)]
          cell.shapes(indices[:res]).insert(Path::new(points, rw, 0, 0))
          if i == n-1
            points = [Point::new(offset, ls-r), Point::new(offset, vs+sl)]
            x = offset
            y = vs+sl-r-vs/2
            #insert_cell indices, :via, x, y, vs, u1
            #insert_cell indices, :cnt, x, y, vs, u1
            #insert_cell indices, :diff, x, y, vs, u1
            create_contacts indices, rw, x, y, vs, u1
          end
          cell.shapes(indices[:diff]).insert(Path::new(points, rw, 0, 0))

          if prev_x
            x = offset
            y = vs + sl + rw/2
            points = [Point::new(x, y), Point::new(prev_x, y)]
            cell.shapes(indices[:diff]).insert(Path::new(points, rw, rw/2, rw/2))
            cell.shapes(indices[:res]).insert(Path::new(points, rw, rw/2, rw/2))
          end
        end
        prev_x = offset  
      end
    end

  end

  class R_diff &lt; Resistor
    include RBA
    def initialize
      super
      param(:l, TypeDouble, "Resistor length", :default =&gt; 40.0.um)
      param(:w, TypeDouble, "Resistor width", :default =&gt; 10.0.um)
      param(:n, TypeInt, "Number of maximum stripes", :default =&gt; 1)
      param(:s, TypeDouble, "Space between stripes", :default =&gt; 4.0.um)
      param(:m, TypeDouble, "Maximum stripe length", :default =&gt; 1000.0.um)
      param(:ho, TypeBoolean, "Headers outside?", :default =&gt; false)
      param(:rval, TypeDouble, "Resistor value", :default =&gt; 0, :hidden=&gt; true)
    end
    def display_text_impl
      if n &gt; 1
        "R_diff\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s},s=#{s}um =&gt; R=#{rval})"
      else
        "R_diff\r\n(L=#{l.to_s}um,W=#{w.to_s}um,n=#{n.to_s} =&gt; R=#{rval})"
      end
    end       
    def coerce_parameters_impl
      sheet_resistance = 700.0
      set_rval(sheet_resistance * l / w)
    end
  end
  
  class Capacitor &lt; MinedaPCell
    include RBA

    def initialize

      # Important: initialize the super class
      super
      param(:l, TypeDouble, "Capacitor length", :default =&gt; 100.0.um)
      param(:w, TypeDouble, "Capacitor width", :default =&gt; 100.0.um)

      param(:cval, TypeDouble, "Capacitor value", :default =&gt; 0, :hidden=&gt; true)
    end
    
    def display_text_impl
      # Provide a descriptive text for the cell
      "Capacitor\r\n(L=#{l.to_s}um,W=#{w.to_s}um,C=#{cval})"
    end
    
    def coerce_parameters_impl
      
      # We employ coerce_parameters_impl to decide whether the handle or the 
      # numeric parameter has changed (by comparing against the effective 
      # radius ru) and set ru to the effective radius. We also update the 
      # numerical value or the shape, depending on which on has not changed.
      area_cap = 0.566e-15
      set_cval(area_cap * l * w)
    end
    
    # default implementation
    def can_create_from_shape_impl
      false
    end
    
    def transformation_from_shape_impl
      # I「Create PCell from shape（形状からPCellを作成）」プロトコルを実装します。
      # 変形を決定するために、図形のバウンディングボックスの中心を使用します。
      Trans.new(shape.bbox.center)
    end
    
    def produce_impl
      cw = (w/layout.dbu).to_i
      cl = (l/layout.dbu).to_i

      grid = 4.0.um
      u1 = (grid/layout.dbu).to_i
      s = 12.0.um # via size (fixed)
      vs = (s/layout.dbu).to_i
      
      diff_index = layout.insert_layer(LayerInfo::new(3, 0))     
      m1_index = layout.insert_layer(LayerInfo::new(8, 0))
      m2_index = layout.insert_layer(LayerInfo::new(10, 0))
      cap_index = layout.insert_layer(LayerInfo::new(16, 0))
      parea_index = layout.insert_layer(LayerInfo::new(18, 0))
      via_index = layout.insert_layer(LayerInfo::new(9, 0))
      cnt_index = layout.insert_layer(LayerInfo::new(7,0))
      indices = {diff: diff_index, m1: m1_index, m2: m2_index, 
                 via: via_index, cnt: cnt_index}
      create_box diff_index, u1+vs+u1, -u1, u1+vs+u1+ cw+u1, cl+u1+vs+u1
      create_box parea_index, u1+vs, -2*u1, u1+vs+u1+ cw+2*u1, cl+u1+vs+2*u1
      create_box m1_index, 0, 0, u1+vs+u1 + cw, cl
      create_box cap_index, 0, 0, u1+vs+u1 + cw, cl 
      create_contacts_vertically indices, :via, u1+vs/2, 0, u1+vs/2, cl, vs, u1
      create_contacts_horizontally indices, :cnt, u1+vs+u1,  cl + u1+vs/2, u1+vs+u1+ cw, cl + u1+vs/2, vs, u1
      # insert_cell indices, nsubcont_index, 0, cl+2*u1+vs, vs, u1
      insert_cell indices, :diff, 0, cl+2*u1+vs, vs, u1
      insert_cell indices, :cnt, 0, cl+2*u1+vs, vs, u1
      #          points = [Point::new(offset, vs), Point::new(offset, vs/2+r)]
      #          cell.shapes(pol_index).insert(Path::new(points, rw, vs, vs))
      #          cell.shapes(res_index).insert(Path::new(points, rw, vs/4, vs/4))
    end
    
    def create_contacts_horizontally indices, index, x1, y1, x2, y2, vs, u1
      (x1+vs/2..x2-vs/2).step(vs){|x|
        insert_cell indices, index, x, y1, vs, u1
      }
    end
    
    def create_contacts_vertically indices, index, x1, y1, x2, y2, vs, u1
      (y1+vs/2..y2-vs/2).step(vs){|y|
        insert_cell indices, index, x1, y, vs, u1
      }
    end
    
    def create_box index, x1, y1, x2, y2
      cell.shapes(index).insert(Box::new(x1, y1, x2, y2))
    end
    
    def instantiate index, x, y
      CellInstArray.new(index, Trans.new(x, y))
    end
  end
  
  class MIM_cap &lt; Capacitor
    def display_text_impl
      # Provide a descriptive text for the cell
      "MIM Capacitor\r\n(L=#{l.to_s}um,W=#{w.to_s}um,C=#{cval})"
    end
    
    def coerce_parameters_impl
      area_cap = 0.2e-15
      set_cval(area_cap * l * w)
    end
    
    def produce_impl
      cw = (w/layout.dbu).to_i
      cl = (l/layout.dbu).to_i
      grid = 4.0.um
      u1 = (grid/layout.dbu).to_i
      s = 12.0.um # via size (fixed)
      vs = (s/layout.dbu).to_i
      m1_index = layout.insert_layer(LayerInfo::new(8, 0))
      m2_index = layout.insert_layer(LayerInfo::new(10, 0))
      cap_index = layout.insert_layer(LayerInfo::new(16, 0))
      via_index = layout.insert_layer(LayerInfo::new(9, 0))
      cnt_index = layout.insert_layer(LayerInfo::new(7,0))
      indices = {m1: m1_index, m2: m2_index, 
                 via: via_index, cnt: cnt_index}
      create_box m1_index, 0, 0, vs +vs+u1 + u1/2 + cw, cl
      create_box cap_index, 0, 0, vs+vs+u1 + u1/2 + cw, cl
      create_box m2_index, u1+vs+u1+ u1 + u1/2, -u1, u1+vs+u1+ cw+u1 + u1 + u1/2, cl+u1+vs+u1
      create_contacts_vertically indices, :via, u1+vs/2, 0, u1+vs/2, cl, vs, u1
      create_contacts_horizontally indices, :via, u1+vs+u1+ u1 + u1/2,  cl + u1+vs/2, u1+vs+u1+ cw + u1 + u1 + u1/2, cl + u1+vs/2, vs, u1

      #          points = [Point::new(offset, vs), Point::new(offset, vs/2+r)]
      #          cell.shapes(pol_index).insert(Path::new(points, rw, vs, vs))
      #          cell.shapes(res_index).insert(Path::new(points, rw, vs/4, vs/4))
    end
  end
  
  class Mineda2020_1 &lt; Library
    
    def initialize  
      
      # 説明を設定
      self.description = "PCells"
      
      # PCell宣言を作成する
      # layout.register_pcell("Resistor", Resistor::new)
      #      layout.register_pcell("Nch", Nch::new)
      layout.register_pcell("Pch", Pch::new)
      layout.register_pcell("R_diff", R_diff::new)
      #      layout.register_pcell("HR_poly", HR_poly::new)
      layout.register_pcell("MIM_cap", MIM_cap::new)
      layout.register_pcell("Diff_cap", Capacitor::new)

      # "Mineda2020_1"という名前で登録します。
      # その名前のライブラリがすでに存在していた場合は、その時点で置き換えられます。
      register("PCells_Mineda2020_1")
    end
  end

  # ライブラリをインスタンス化して登録する
  Mineda2020_1::new
end
</text>
</klayout-macro>
